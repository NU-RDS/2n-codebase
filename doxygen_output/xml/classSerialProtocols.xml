<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classSerialProtocols" kind="class" language="C++" prot="public">
    <compoundname>SerialProtocols</compoundname>
    <includes refid="serial__protocols_8h" local="no">serial_protocols.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classSerialProtocols_1a73d6aef97380724db91957f5db7cd3a8" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SerialProtocols::_encoder_feedback_packet[FEEDBACK_PACKET_SIZE]</definition>
        <argsstring>[FEEDBACK_PACKET_SIZE]</argsstring>
        <name>_encoder_feedback_packet</name>
        <qualifiedname>SerialProtocols::_encoder_feedback_packet</qualifiedname>
        <briefdescription>
<para>Buffer for storing the encoded feedback packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="69" column="13" bodyfile="include/serial_protocols/serial_protocols.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSerialProtocols_1a559e52f0c98d7a0e596daea307cc37ce" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t SerialProtocols::_joint_command_packet[JOINT_COMMAND_PACKET_SIZE]</definition>
        <argsstring>[JOINT_COMMAND_PACKET_SIZE]</argsstring>
        <name>_joint_command_packet</name>
        <qualifiedname>SerialProtocols::_joint_command_packet</qualifiedname>
        <briefdescription>
<para>Buffer for storing the received joint command packet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="72" column="13" bodyfile="include/serial_protocols/serial_protocols.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSerialProtocols_1a0b2a324b12c948797b327363fe7b7bca" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float SerialProtocols::_joint_command[NUM_MOTORS]</definition>
        <argsstring>[NUM_MOTORS]</argsstring>
        <name>_joint_command</name>
        <qualifiedname>SerialProtocols::_joint_command</qualifiedname>
        <briefdescription>
<para>Array to hold decoded joint commands (size NUM_MOTORS). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="75" column="11" bodyfile="include/serial_protocols/serial_protocols.h" bodystart="75" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classSerialProtocols_1ae4b9453d604f377e34b520b8f58a7e11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SerialProtocols::SerialProtocols</definition>
        <argsstring>()</argsstring>
        <name>SerialProtocols</name>
        <qualifiedname>SerialProtocols::SerialProtocols</qualifiedname>
        <briefdescription>
<para>Constructs a new <ref refid="classSerialProtocols" kindref="compound">SerialProtocols</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="30" column="5" bodyfile="src/serial_protocols/serial_protocols.cpp" bodystart="8" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classSerialProtocols_1a4aa379fe04b74f8b0807e9b552f00cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t SerialProtocols::computeChecksum</definition>
        <argsstring>(uint8_t msgType, uint8_t payloadLen, const uint8_t *payload)</argsstring>
        <name>computeChecksum</name>
        <qualifiedname>SerialProtocols::computeChecksum</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>msgType</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>payloadLen</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>payload</declname>
        </param>
        <briefdescription>
<para>Computes a checksum for a serial packet. </para>
        </briefdescription>
        <detaileddescription>
<para>The checksum is computed as the 8-bit sum of the message type, payload length, and each byte of the payload.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgType</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type byte. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payloadLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the payload. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the payload data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Computed 8-bit checksum.</para>
</simplesect>
The checksum is calculated by summing the message type, payload length, and every byte in the payload. The result is truncated to an 8-bit value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msgType</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payloadLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the payload. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payload</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the payload data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An 8-bit checksum value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="43" column="13" bodyfile="src/serial_protocols/serial_protocols.cpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classSerialProtocols_1a967d508f968bd1d09f41db97ea97b432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * SerialProtocols::encodeFeedbackPacket</definition>
        <argsstring>(const float positions[NUM_JOINTS])</argsstring>
        <name>encodeFeedbackPacket</name>
        <qualifiedname>SerialProtocols::encodeFeedbackPacket</qualifiedname>
        <param>
          <type>const float</type>
          <declname>positions</declname>
          <array>[NUM_JOINTS]</array>
        </param>
        <briefdescription>
<para>Encodes a feedback packet from joint positions. </para>
        </briefdescription>
        <detaileddescription>
<para>The feedback packet is constructed using a start byte, message type, payload length, the payload containing two float positions, a checksum, and an end byte.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of joint positions (2 floats). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the encoded feedback packet.</para>
</simplesect>
The packet is structured as follows:<itemizedlist>
<listitem><para>Byte 0: START_BYTE</para>
</listitem><listitem><para>Byte 1: MSG_FEEDBACK</para>
</listitem><listitem><para>Byte 2: FEEDBACK_PAYLOAD_LENGTH</para>
</listitem><listitem><para>Bytes 3-10: Payload (2 floats representing positions)</para>
</listitem><listitem><para>Byte 11: Checksum (computed over bytes 1-10)</para>
</listitem><listitem><para>Byte 12: END_BYTE</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of two float positions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the encoded feedback packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="54" column="13" bodyfile="src/serial_protocols/serial_protocols.cpp" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classSerialProtocols_1aec800812be41156be7e0a1e0374a03fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * SerialProtocols::decodeJointCommandPacket</definition>
        <argsstring>(const uint8_t *data)</argsstring>
        <name>decodeJointCommandPacket</name>
        <qualifiedname>SerialProtocols::decodeJointCommandPacket</qualifiedname>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Decodes a joint command packet. </para>
        </briefdescription>
        <detaileddescription>
<para>This method validates the packet structure (start byte, message type, payload length, checksum, and end byte) and decodes the payload into joint command values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the received packet data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the decoded joint command array, or nullptr if validation fails.</para>
</simplesect>
The expected packet layout is:<itemizedlist>
<listitem><para>Byte 0: START_BYTE</para>
</listitem><listitem><para>Byte 1: MSG_JOINT_COMMAND</para>
</listitem><listitem><para>Byte 2: JOINT_COMMAND_PAYLOAD_LENGTH</para>
</listitem><listitem><para>Bytes 3-10: Payload (4 float position commands, 16 bytes total)</para>
</listitem><listitem><para>Byte 11: Checksum (computed over bytes 1-10)</para>
</listitem><listitem><para>Byte 12: END_BYTE</para>
</listitem></itemizedlist>
</para>
<para>The method validates each part of the packet and returns a pointer to the decoded joint commands. If any validation fails, the method returns nullptr.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the received packet data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the decoded joint command array, or nullptr if the packet is invalid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/serial_protocols/serial_protocols.h" line="65" column="11" bodyfile="src/serial_protocols/serial_protocols.cpp" bodystart="77" bodyend="106"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Provides functions to encode and decode serial packets for feedback and joint commands. </para>
    </briefdescription>
    <detaileddescription>
<para>This class includes methods to compute packet checksums, encode feedback packets, and decode joint command packets received via serial communication. </para>
    </detaileddescription>
    <location file="include/serial_protocols/serial_protocols.h" line="25" column="1" bodyfile="include/serial_protocols/serial_protocols.h" bodystart="25" bodyend="76"/>
    <listofallmembers>
      <member refid="classSerialProtocols_1a73d6aef97380724db91957f5db7cd3a8" prot="private" virt="non-virtual"><scope>SerialProtocols</scope><name>_encoder_feedback_packet</name></member>
      <member refid="classSerialProtocols_1a0b2a324b12c948797b327363fe7b7bca" prot="private" virt="non-virtual"><scope>SerialProtocols</scope><name>_joint_command</name></member>
      <member refid="classSerialProtocols_1a559e52f0c98d7a0e596daea307cc37ce" prot="private" virt="non-virtual"><scope>SerialProtocols</scope><name>_joint_command_packet</name></member>
      <member refid="classSerialProtocols_1a4aa379fe04b74f8b0807e9b552f00cc0" prot="public" virt="non-virtual"><scope>SerialProtocols</scope><name>computeChecksum</name></member>
      <member refid="classSerialProtocols_1aec800812be41156be7e0a1e0374a03fd" prot="public" virt="non-virtual"><scope>SerialProtocols</scope><name>decodeJointCommandPacket</name></member>
      <member refid="classSerialProtocols_1a967d508f968bd1d09f41db97ea97b432" prot="public" virt="non-virtual"><scope>SerialProtocols</scope><name>encodeFeedbackPacket</name></member>
      <member refid="classSerialProtocols_1ae4b9453d604f377e34b520b8f58a7e11" prot="public" virt="non-virtual"><scope>SerialProtocols</scope><name>SerialProtocols</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
